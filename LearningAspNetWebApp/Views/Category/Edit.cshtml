@model Category
@{
    ViewData["Title"] = "Create";
}

@functions
{
    
}

<!--TODO pay attention to this sort of thing. There is an overload for the Create() method in the CategoryController to receive this as a post
    TODO you can also be explicit about the type of controller/action you want to return the form data to. It will default to the overload
-->
<form method="post" asp-action="Edit">
    <div class="border p-3 mt-4">
        <div class="row pb-2">
            <h2 class="text-warning">Create Category</h2>
            <hr/>
        </div>
        <!--Inputs-->
        <div class="mb-3 col-6 text-center">
            <label asp-for="Name" class="mx-4 mb-2"></label>
            <!--TODO Trim name on focus out-->
            <input asp-for="Name"  class="text-center form-control" onfocusout=""/>
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>
        <div class="mb-3 col-6 text-center">
            <label asp-for="DisplayOrder" class="mx-4 mb-2"></label>
            <input asp-for="DisplayOrder" class="text-center form-control"/>
            <span asp-validation-for="DisplayOrder" class="text-danger"></span>
        </div>
        <!--Buttons-->
        <div class="text-center">
            <button type="submit" style="width: 150px" class="btn btn-warning text-center my-auto">Update</button>
            <a class="btn btn-warning my-auto" style="width: 150px" asp-controller="Category" asp-action="Index">Go back</a>
        </div>
    </div>
    <div asp-validation-summary="All"></div>
</form>

<!--TODO Create Partial View (be sure to lead with an underscore and create a section for scripts (see below)
If you look in the _ValidationScriptsPartial file, you'll see that it's made up of two scripts. Putting this into a Scripts section will load them in.
This is so client-side validation will occur without having to touch the server at all. A bit faster and cleaner.
-->
@section Scripts{
    @{
        <partial name="_ValidationScriptsPartial"/>
    }
}